# SQL PROJECT : EMPLOYEE MANAGMENT SQL PROJECT.
# PURPOSE : IN EVERY COMPANY MAKE THE EMPLOYEES RECORDS IT IS HELP TO TAKE A BETTER DECISION 
# I CREATE THE COMPANYS NAME DATABASE BELOW & USED IT

CREATE DATABASE COMPANYS;
use COMPANYS ;

# CREATE THE COMP_INFORMATION TABLE STRUCTURE & INTSERT INTO VALUES 
create TABLE COMP_INFOMATION (
ID INT NOT NULL auto_increment PRIMARY KEY,
EMP_NAME VARCHAR(30) NOT NULL,
AGE INT NOT NULL,
DOJ DATE NOT NULL,
DESIGNATION VARCHAR(60) NOT NULL,
SALARY DECIMAL(15,2) NOT NULL,
MOBILE VARCHAR(10) NOT NULL,
CITY VARCHAR(30) NOT NULL ) ;

SELECT * FROM COMP_INFORMATION;

INSERT INTO COMP_INFORMATION VALUES ('RIYA SHARMA',25,'2020-02-01','PROGRAMMER',25000,'9898860568','PUNE');
INSERT INTO COMP_INFORMATION VALUES ('SITA GOLE',55,'2018-15-01','DATA ANALYST',60000,'9681860568','AKOLA');
INSERT INTO COMP_INFORMATION VALUES ('RAJAT KHAN',40,'2014-22-11','MANAGER',99000,'8898220568','MUMBAI');
INSERT INTO COMP_INFORMATION VALUES ('NEHA VARMA',35,'2011-05-01','PROGRAMMER',35000,'9536860411','PUNE');
INSERT INTO COMP_INFORMATION VALUES ('JAY MULE',30,'2022-02-01','MANAGER',80000,'9898860568''SATARA');
INSERT INTO COMP_INFORMATION VALUES ('MEGHA JADHAV',42,'2012-16-04','DATA SCIENTIST',45000,'1425665688','BANGOLOR');
INSERT INTO COMP_INFORMATION VALUES ('PRIYA YADAV',22,'2017-12-05','PROGRAMMER',25000,'9925660568','HYDRABAD');
INSERT INTO COMP_INFORMATION VALUES ('YASH PATHARE',45,'2013-02-01','PYTHON DEVELOPER',55000,'9523660525','AKOLA');
INSERT INTO COMP_INFORMATION VALUES ('VANSH SHARMA',35,'2015-12-11','SQL DEVELOPER',85000,'888862468','PUNE');
INSERT INTO COMP_INFORMATION VALUES ('RAJESH MANE',33,'2013-05-06','MANAGER',64000,'7592260521','MUMBAI');
INSERT INTO COMP_INFORMATION VALUES ('RAJ PATEL',41,'2007-14-07','DATA ANALYST',82000,'9892360512','DEHLI');

ALTER TABLE COMP_INFORMATION
ADD STATE VARCHAR(255);

SELECT MOBILE,SALARY FROM COMP_INFORMATION 
WHERE 'MANAGER' ;

SELECT EMP_NAME,MOBILE,SALARY,CITY FROM COMP_INFORMATION 
WHERE SALARY >50000 ;

UPDATE COMP_INFORMATION
SET CITY ='CHENNAI'
WHERE ID=2;

DELETE FROM COMP_INFORMATION WHERE CITY='DEHLI';

SELECT ID,EMP_NAME FROM COMP_INFORMATION WHERE DESIGNATION='SQL DEVELOPER' AND CITY='PUNE';

SELECT ID,EMP_NAME ,SALARY FROM COMP_INFORMATION WHERE DESIGNATION='DATA ANALYST' AND CITY='AKOLA';

SELECT * FROM COMP_INFORMATION WHERE NOT DESIGNATION='PROGRAMMER' ;

SELECT * FROM COMP_INFORMATION WHERE DESIGNATION='SQL DEVELOPER' OR CITY='PUNE';

SELECT SALARY FROM COMP_INFORMATION WHERE DESIGNATION='MANAGER' OR CITY='SATARA';

SELECT * FROM COMP_INFORMATION WHERE  CITY LIKE '%P';

SELECT * FROM COMP_INFORMATION WHERE  CITY LIKE 'A%';

SELECT * FROM COMP_INFORMATION WHERE  MOBILE LIKE '__9%';

SELECT * FROM COMP_INFORMATION WHERE  CITY LIKE 'S%A';

SELECT * FROM COMP_INFORMATION WHERE  SALARY BETWEEN 25000 AND 45000;

SELECT * FROM COMP_INFORMATION WHERE  ID  BETWEEN 2 AND 7 ;

SELECT * FROM COMP_INFORMATION ORDER BY  SALARY DESC;

SELECT * FROM COMP_INFORMATION ORDER BY  DOJ DESC;

SELECT COUNT(CITY) FROM COMP_INFORMATION ;

SELECT SUM(SALARY) FROM COMP_INFORMATION ;

SELECT AVG(SALARY) FROM COMP_INFORMATION ;

SELECT EMP_NAME , MIN(SALARY)  AS LOWESTSALARY FROM COMP_INFORMATION ;
SELECT EMP_NAME , MAX(SALARY)  AS HIGHESTSALARY FROM COMP_INFORMATION ;

SELECT EMP_NAME , MAX(SALARY)  AS SECONDHIGHESTSALARY FROM COMP_INFORMATION 
WHERE SALARY NOT IN (SELECT MAX(SALARY) FROM COMP_INFORMATION);

SELECT EMP_NAME , MAX(SALARY)  AS THIRDHIGHESTSALARY FROM COMP_INFORMATION
WHERE SALARY < (SELECT MAX(SALARY) FROM COMP_INFORMATION) 
WHERE SALARY < (SELECT MAX(SALARY) FROM COMP_INFORMATION);

SELECT SALARY FROM COMP_INFORMATION
ORDER BY SALARY DESC LIMIT 1;

SELECT SALARY FROM COMP_INFORMATION
ORDER BY SALARY ASC LIMIT 2,1; #THIRD LOWEST SALARY SHOW

# QUERY USED TO ALTERNATE RECORD FETCH FROM TABLE EVEN NO RECORD
 SELECT * FROM COMP_INFORMATION WHERE ID%2=0;
 
 # FIND DUPLICATE ROWS VALUES FROM TABLE
 SELECT MOBILE FROM COMP_INFORMATION
 GROUP BY MOBILE
 HAVING COUNT(MOBILE)>1;
 
 SELECT * FROM COMP_INFORMATION
 WHERE SALARY IN(25000,30000,42000);

TRUNCATE TABLE COMP_INFORMATION ;

#CONTRAINS EXAMPLES BELOW 
CREATE DATABASE CONSTRAINEXAMPLE;
USE CONSTRAINEXAMPLE;

CREATE TABLE Notnullexample(
EMP_NAME VARCHAR(30) NOT NULL,
AGE INT);

INSERT INTO Notnullexample VALUES('RIYA',25); # THIS VALUES INSERT .
INSERT INTO Notnullexample VALUES(25);  # THERE IS ERROR OCCURE ,THIS VALUES NOT INSERT

CREATE TABLE DEFAULTexample(
EMP_NAME VARCHAR(30) NOT NULL,
AGE INT,
MOBILE VARCHAR(10) DEFAULT 'MOBILE NUMBER NOT AVAILABLE');

INSERT INTO DEFAULTexample VALUES ('RIYA',25);

 CREATE TABLE CHECKexample(
EMP_NAME VARCHAR(30) NOT NULL,
AGE INT,
CHECK(AGE>=18) );

INSERT INTO CHECKexample VALUES ('RIYA',15); # NOT INSERT VALUES BACUASE OF CHECK CONDITION IS FALSE

CREATE TABLE UNIQUETexample(
EMP_NAME VARCHAR(30) NOT NULL,
AGE INT,
MOBILE VARCHAR(10) NOT NULL UNIQUE);

INSERT INTO UNIQUEexample VALUES ('RIYA',25,'9882847236');
INSERT INTO UNIQUEexample VALUES ('SEEMA',30,'9882847236'); # ERROR MOBILE NUMNER SAME NOT UNIQUE NUMBER.

#PRIMARY KEY FOREIGN KEY EXAMPLE
CREATE TABLE DEPARTMENT(
DEP_ID INT PRIMARY KEY,
DEP_NAME VARCHAR(50));

INSERT INTO DEPARTMENT VALUES(1,'HR');
INSERT INTO DEPARTMENT VALUES(2,'ACCOUNT');
INSERT INTO DEPARTMENT VALUES(3,'MARKETING');

CREATE TABLE EMPLOYEE(
EMP_ID INT PRIMARY KEY,
DEP_ID INT PRIMARY KEY,
EMP_NAME VARCHAR(30) NOT NULL,
FOREIGN KEY(DEP_ID) REFERENCES DEPARTMENT(DEP_ID) );

# DISPLAY THE CURRENT DATE
 SELECT CURRENT_DATE;
 SELECT CURRENT_DATE();
 SELECT DATE(NOW());
 SELECT CURDATE();
 
 #JOINS  
 CREATE TABLE  CUSTOMER (
 CUSTOMER_ID INT PRIMARY KEY,
 CUSTOMER_NAME VARCHAR(30),
 CITY VARCHAR(30));
 INSERT INTO CUSTOMER VALUES(1,'RAJ','PUNE');
 INSERT INTO CUSTOMER VALUES(2,'JAY','MUMBAI');
 INSERT INTO CUSTOMER VALUES(3,'PRIYA','AKOLA');
 INSERT INTO CUSTOMER VALUES(4,'RIYA','HYDRABAD');
 
 CREATE TABLE  ONLINEORDER (
 ORDER_ID INT,
 CUSTOMER_ID INT PRIMARY KEY,
 ORDERDATE DATE );
 INSERT INTO CUSTOMER VALUES(101,1,'2022-04-11');
 INSERT INTO CUSTOMER VALUES(102,2,'2022-05-01');
 INSERT INTO CUSTOMER VALUES(103,3,'2022-04-01');
 INSERT INTO CUSTOMER VALUES(104,4,'2022-06-21');
 
 #INNER JOIN 
SELECT column_name(s)
FROM table1
INNER JOIN table2
ON table1.column_name = table2.column_name;

SELECT CUSTOMER.CUSTOMER_NAME,ONLINEORDER.ORDER_ID 
FROM CUSTOMER
INNER JOIN ONLINEORDER
ON CUSTOMER.CUSTOMER_ID = ONLINEORDER.CUSTOMER_ID;

#LEFT JOIN
SELECT column_name(s)
FROM table1
LEFT JOIN table2
ON table1.column_name = table2.column_name;

SELECT CUSTOMER.CUSTOMER_NAME,ONLINEORDER.ORDER_ID 
FROM CUSTOMER
LEFT JOIN ONLINEORDER
ON CUSTOMER.CUSTOMER_ID = ONLINEORDER.CUSTOMER_ID;

#RIGHT JOIN
SELECT column_name(s)
FROM table1
RIGHT JOIN table2
ON table1.column_name = table2.column_name;

SELECT CUSTOMER.CUSTOMER_NAME,ONLINEORDER.ORDER_ID ,ONLINEORDER.ORDERDATE
FROM CUSTOMER
RIGHT JOIN ONLINEORDER
ON CUSTOMER.CUSTOMER_ID = ONLINEORDER.CUSTOMER_ID;

#FULL OUTER JOIN
SELECT column_name(s)
FROM table1
FULL OUTER JOIN table2
ON table1.column_name = table2.column_name
WHERE condition;

SELECT CUSTOMER.CUSTOMER_NAME,ONLINEORDER.ORDER_ID ,ONLINEORDER.ORDERDATE
FROM CUSTOMER
FULL OUTER JOIN ONLINEORDER
ON CUSTOMER.CUSTOMER_ID = ONLINEORDER.CUSTOMER_ID
ORDER BY CUSTOMER.CUSTOMER_NAME;

#SELF JOIN
SELECT column_name(s)
FROM table1 T1, table1 T2
WHERE condition;

SELECT A.Customer_Name AS CustomerName1, B.CustomerName AS CustomerName2, A.City
FROM Customers A, Customers B
WHERE A.CustomerID <> B.CustomerID
AND A.City = B.City
ORDER BY A.City;
 

